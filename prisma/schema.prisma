generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                  String      @id @default(cuid()) @map("_id")
  name                String?
  email               String?     @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  accounts            Account[]
  role                UserRole    @default(USER)
  isTwoFactorEnabled  Boolean     @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                 String     @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?    @map("_refresh_token")
  access_token       String?    @map("_access_token")
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?    @map("_id_token")
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(cuid()) @map("_id")
  email     String
  token     String   @unique
  expires   DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid()) @map("_id")
  email     String
  token     String   @unique
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid()) @map("_id")
  email     String
  token     String   @unique
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}